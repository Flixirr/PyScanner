# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design_projekt.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMessageBox, QMainWindow, QAction
from scanner import Scanner

class Ui_Splash(QMainWindow):
        def __init__(self):
                self.out = list()
                self.scanned = list()
                self.configurations = "out.txt"
                super().__init__()

        def setupUi(self):
                self.setObjectName("Splash")
                self.resize(680, 699)
                self.centralwidget = QtWidgets.QWidget(self)
                self.centralwidget.setObjectName("centralwidget")
                self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
                self.horizontalLayout.setContentsMargins(10, 10, 10, 10)
                self.horizontalLayout.setSpacing(0)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.shadowDrop = QtWidgets.QFrame(self.centralwidget)
                self.shadowDrop.setEnabled(True)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.shadowDrop.sizePolicy().hasHeightForWidth())
                self.shadowDrop.setSizePolicy(sizePolicy)
                self.shadowDrop.setMaximumSize(QtCore.QSize(660, 638))
                self.shadowDrop.setWhatsThis("")
                self.shadowDrop.setStyleSheet("QFrame#shadowDrop {\n"
                "    background-color: rgb(10, 9, 8);\n"
                "    border: 5px solid rgb(214, 194, 174);\n"
                "}")
                self.shadowDrop.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.shadowDrop.setFrameShadow(QtWidgets.QFrame.Raised)
                self.shadowDrop.setObjectName("shadowDrop")
                self.label = QtWidgets.QLabel(self.shadowDrop)
                self.label.setGeometry(QtCore.QRect(0, 70, 661, 71))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(40)
                self.label.setFont(font)
                self.label.setStyleSheet("color: rgb(214, 194, 174);")
                self.label.setAlignment(QtCore.Qt.AlignCenter)
                self.label.setObjectName("label")
                self.label_2 = QtWidgets.QLabel(self.shadowDrop)
                self.label_2.setGeometry(QtCore.QRect(0, 140, 661, 31))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(16)
                self.label_2.setFont(font)
                self.label_2.setStyleSheet("color: rgb(94, 80, 63);")
                self.label_2.setAlignment(QtCore.Qt.AlignCenter)
                self.label_2.setObjectName("label_2")
                self.lineEdit = QtWidgets.QLineEdit(self.shadowDrop)
                self.lineEdit.setGeometry(QtCore.QRect(200, 269, 260, 31))
                self.lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
                self.lineEdit.setStyleSheet("QLineEdit {\n"
                "    border: 2px solid;\n"
                "    border-color:#D6C2AE;\n"
                "    background-color: #0A0908;\n"
                "    color: white;\n"
                "}\n"
                "\n"
                "QLineEdit:focus {\n"
                "    border: 2px solid;\n"
                "    border-color:#D6C2AE;\n"
                "    background-color: #0A0908;\n"
                "    color: white;\n"
                "}")
                self.lineEdit.setInputMask("")
                self.lineEdit.setFrame(False)
                self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.lineEdit.setObjectName("lineEdit")
                self.pushButton = QtWidgets.QPushButton(self.shadowDrop)
                self.pushButton.setGeometry(QtCore.QRect(290, 320, 80, 35))
                self.pushButton.setStyleSheet("QPushButton {\n"
                "    background-color: rgb(94, 80, 63);\n"
                "    color: rgb(214, 194, 174);\n"
                "    font: 87 8pt \"Segoe UI Black\";\n"
                "    border: 2px solid rgb(214, 194, 174);\n"
                "}\n"
                "\n"
                "QPushButton:hover {\n"
                "    background-color: rgb(214, 194, 174);\n"
                "    color: rgb(94, 80, 63);\n"
                "    font: 87 8pt \"Segoe UI Black\";\n"
                "    border: 2px solid rgb(94, 80, 63);\n"
                "}")
                self.pushButton.setObjectName("pushButton")
                self.scrollArea = QtWidgets.QScrollArea(self.shadowDrop)
                self.scrollArea.setGeometry(QtCore.QRect(20, 380, 621, 241))
                self.scrollArea.setWidgetResizable(True)
                self.scrollArea.setObjectName("scrollArea")
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 619, 239))
                self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
                self.scrollArea.setWidget(self.scrollAreaWidgetContents)

                self.resultArea = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)

                self.horizontalLayout.addWidget(self.shadowDrop)
                self.setCentralWidget(self.centralwidget)
                self.menuBar = QtWidgets.QMenuBar(self)
                self.menuBar.setGeometry(QtCore.QRect(0, 0, 680, 21))
                self.menuBar.setObjectName("menuBar")
                self.menuSave_to_file = QtWidgets.QAction(self)
                self.menuSave_to_file.setObjectName("menuSave_to_file")
                self.menuEdit_save_path = QtWidgets.QAction(self)
                self.menuEdit_save_path.setObjectName("menuEdit_save_path")
                self.menuClear_result = QtWidgets.QAction(self)
                self.menuClear_result.setObjectName("menuClear_result")
                self.setMenuBar(self.menuBar)
                self.statusBar = QtWidgets.QStatusBar(self)
                self.statusBar.setObjectName("statusBar")
                self.setStatusBar(self.statusBar)
                self.menuBar.addAction(self.menuSave_to_file)
                self.menuBar.addAction(self.menuEdit_save_path)
                self.menuBar.addAction(self.menuClear_result)

                self.retranslateUi(self)
                QtCore.QMetaObject.connectSlotsByName(self)

                self.pushButton.clicked.connect(lambda: self.scan_event())
                self.menuClear_result.triggered.connect(lambda: self.clear_res_area())
                self.menuEdit_save_path.triggered.connect(lambda: self.edit_path())
                self.menuSave_to_file.triggered.connect(lambda: self.save_to_file())

        def retranslateUi(self, Splash):
                _translate = QtCore.QCoreApplication.translate
                Splash.setWindowTitle(_translate("Splash", "MainWindow"))
                self.label.setText(_translate("Splash", "<b>Py</b>Scanner"))
                self.label_2.setText(_translate("Splash", "<b>Fast</b> and <b>effective</b>"))
                self.lineEdit.setText(_translate("Splash", "127.0.0.1"))
                self.lineEdit.setPlaceholderText(_translate("Splash", "Enter host to start scanning"))
                self.pushButton.setText(_translate("Splash", "SCAN"))
                self.menuSave_to_file.setText(_translate("Splash", "Save to file"))
                self.menuEdit_save_path.setText(_translate("Splash", "Edit save path"))
                self.menuClear_result.setText(_translate("Splash", "Clear results"))

        def scan_event(self):
                host = self.lineEdit.text()
                if host == "" or len(host.split('.')) != 4:
                        self.statusBar.showMessage("No parameters or parameters have invalid format")
                else:
                        if host in self.scanned:
                                repeat_action = QMessageBox()
                                repeat_action.setText("This host has already been scanned. Do you wish to proceed?")
                                repeat_action.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)

                                repeat_action = repeat_action.exec()

                                if repeat_action == QMessageBox.Yes:
                                        self.scanning_500(host)
                                else:
                                        pass
                        else:       
                                self.scanning_500(host)
        
        def scanning_500(self, host):
                h_scan = Scanner(host)
                h_scan.start_scanning()

                label_break = QtWidgets.QLabel()
                label_break.setText("=========================================================")

                self.resultArea.addWidget(label_break)

                label_start = QtWidgets.QLabel()
                label_start.setText("Scanning: " + host)
                
                self.resultArea.addWidget(label_start)

                for port in h_scan.working_ports:
                        label_holder = QtWidgets.QLabel()
                        label_holder.setText(port)
                        self.resultArea.addWidget(label_holder)
                
                
                self.resultArea.addWidget(label_break)

                self.scanned.append(host)
                self.out.append(h_scan.working_ports)

                self.statusBar.showMessage("Finished scanning in " + str(h_scan.time_passed) + " s")

        def clear_res_area(self):
                self.resultArea.removeWidget(self.scrollAreaWidgetContents)
                self.scrollAreaWidgetContents.deleteLater()
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 619, 239))
                self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
                self.scrollArea.setWidget(self.scrollAreaWidgetContents)

                self.resultArea = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
                self.out = []
                self.scanned = []
                self.statusBar.showMessage("Cleared")
        
        def edit_path(self):
                txt, confirm = QtWidgets.QInputDialog.getText(self, "Change output path", "Enter new output path")
                if confirm:
                        self.configurations = str(txt)

        def save_to_file(self):
                with open(self.configurations, 'w') as f:
                        for i in range(len(self.scanned)):
                                f.write("==================================\n")
                                f.write("Scanning: " + self.scanned[i] + '\n')
                                
                                for port in self.out[i]:
                                        f.write(port + '\n')

                                f.write("==================================\n")
if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        ui = Ui_Splash()
        ui.setupUi()
        ui.show()
        sys.exit(app.exec_())